/*
solution: test_01
*/
links:
https://jvns.ca/blog/2018/04/28/debugging-a-segfault-on-linux/
https://www.bogotobogo.com/cplusplus/debugging_core_memory_dump_segmentation_fault_gdb.php


step 1:
ulimit -c unlimited
step 2:
gcc -g test_01.c -o test_01

step 3:
./test_01


step 4: Run the following
# gdb ./test_01 ./core
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./test_01...done.
[New LWP 2647]
Core was generated by `./test_01'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00000000004004fd in foo () at test_01.c:11
11	    *ptr = 7;
(gdb) list
6	
7	#include <stdio.h>
8	void foo()
9	{
10	    int *ptr = 0;
11	    *ptr = 7;
12	}
13	int main()
14	{
15	    foo();
(gdb) backtrace
#0  0x00000000004004fd in foo () at test_01.c:11
#1  0x0000000000400513 in main () at test_01.c:15
(gdb) up
#1  0x0000000000400513 in main () at test_01.c:15
15	    foo();
(gdb) down
#0  0x00000000004004fd in foo () at test_01.c:11
11	    *ptr = 7;
(gdb) 

step 5: analysis

Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00000000004004fd in foo () at test_01.c:11
11          *ptr = 7;

